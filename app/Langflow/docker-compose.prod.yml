version: '3.8'

services:
  # Langflow Runtime for production (API-only, no UI)
  langflow-runtime:
    image: langflowai/langflow:latest
    container_name: andi-langflow-runtime-prod
    restart: unless-stopped
    ports:
      - "7860:7860"
    environment:
      # Database connection
      - LANGFLOW_DATABASE_URL=postgresql://${LANGFLOW_POSTGRES_USER}:${LANGFLOW_POSTGRES_PASSWORD}@langflow-postgres:5432/${LANGFLOW_POSTGRES_DB}
      
      # Production configuration
      - LANGFLOW_CONFIG_DIR=/app/langflow
      - LANGFLOW_SECRET_KEY=${LANGFLOW_SECRET_KEY}
      
      # Production settings - Runtime only
      - LANGFLOW_BACKEND_ONLY=true
      - LANGFLOW_AUTO_LOGIN=false
      - LANGFLOW_DEV=false
      - LANGFLOW_LOG_LEVEL=${LOG_LEVEL:-warn}
      
      # Security settings
      - LANGFLOW_SUPERUSER_EMAIL=${LANGFLOW_SUPERUSER_EMAIL}
      - LANGFLOW_SUPERUSER_PASSWORD=${LANGFLOW_SUPERUSER_PASSWORD}
      
      # Performance settings
      - LANGFLOW_WORKERS=${LANGFLOW_WORKERS:-4}
      - LANGFLOW_WORKER_TIMEOUT=${LANGFLOW_WORKER_TIMEOUT:-300}
      - LANGFLOW_MAX_FILE_SIZE=${LANGFLOW_MAX_FILE_SIZE:-100}
      
      # ANDI integration - Database connections for flows
      - ANDI_DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - ANDI_WAREHOUSE_URL=http://${CLICKHOUSE_HOST}:${CLICKHOUSE_PORT}
      
      # Monitoring and observability
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_ENVIRONMENT=${SENTRY_ENVIRONMENT:-production}
      - SENTRY_RELEASE=${SENTRY_RELEASE}
      - SENTRY_TRACES_SAMPLE_RATE=${SENTRY_TRACES_SAMPLE_RATE:-0.1}
      
      # Cache configuration
      - LANGFLOW_CACHE_TYPE=redis
      - LANGFLOW_REDIS_URL=redis://langflow-redis:6379/0
    volumes:
      - langflow-data:/app/langflow
      - langflow-logs:/app/logs
      - ./flows:/app/flows:ro  # Read-only in production
    depends_on:
      langflow-postgres:
        condition: service_healthy
      langflow-redis:
        condition: service_healthy
    networks:
      - andi-langflow
      - andi-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7860/api/v1/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    labels:
      - "com.andi.service=langflow-runtime"
      - "com.andi.environment=production"

  # Production PostgreSQL for Langflow
  langflow-postgres:
    image: postgres:16
    container_name: andi-langflow-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${LANGFLOW_POSTGRES_DB}
      - POSTGRES_USER=${LANGFLOW_POSTGRES_USER}
      - POSTGRES_PASSWORD=${LANGFLOW_POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
      
      # Performance tuning
      - POSTGRES_SHARED_BUFFERS=256MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=1GB
      - POSTGRES_MAINTENANCE_WORK_MEM=64MB
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_WAL_BUFFERS=16MB
      - POSTGRES_DEFAULT_STATISTICS_TARGET=100
    volumes:
      - langflow-postgres-data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - andi-langflow
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${LANGFLOW_POSTGRES_USER} -d ${LANGFLOW_POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    labels:
      - "com.andi.service=langflow-postgres"
      - "com.andi.environment=production"

  # Redis for production caching and sessions
  langflow-redis:
    image: redis:7.2-alpine
    container_name: andi-langflow-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru --tcp-keepalive 60
    volumes:
      - langflow-redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - andi-langflow
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "com.andi.service=langflow-redis"
      - "com.andi.environment=production"

  # Nginx reverse proxy for production
  langflow-nginx:
    image: nginx:alpine
    container_name: andi-langflow-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - langflow-logs:/var/log/nginx
    depends_on:
      - langflow-runtime
    networks:
      - andi-langflow
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.andi.service=langflow-nginx"
      - "com.andi.environment=production"

volumes:
  langflow-data:
    driver: local
    name: andi-langflow-data-prod
  langflow-logs:
    driver: local
    name: andi-langflow-logs-prod
  langflow-postgres-data:
    driver: local
    name: andi-langflow-postgres-prod
  langflow-redis-data:
    driver: local
    name: andi-langflow-redis-prod

networks:
  andi-langflow:
    driver: bridge
    name: andi-langflow-prod
  andi-network:
    external: true
    name: andi-network